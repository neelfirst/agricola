----------------------9/23/2016

Q-table for SFG (Solo Family Game) Agricola

state/action table

State includes harvest countdown clock, revealed action spaces with available resources
Action includes all available action spaces

States run the risk of being interminable...
- 12 permanent spaces + 14 revealed spaces = 26 spaces
- accumulating spaces can have a variable number of resources on them
- order of actions is important, so turn count is a variable
- harvest countdown clock or something of that nature is essential
- the player's board state
- the player's resource count

Real players use heuristics to narrow the number of states to consider...
this should be the comparative aspect of the study - brute force RL vs heuristic RL - compare speed/performance

State set: game state + player state
player state = board state + resource state
game state = available spaces + resources on spaces

available spaces - basically 26-bit binary, unless we get smart about actions affecting available spaces
resources on spaces - wood (14), clay (14), reed (14), fish (14), sp+food (14), stone (10), stone (5), sheep (14), boar (7), cow (5). 14^6 x 10 x 5 x 7 x 5 (13 billion)
resource state - wood, clay, reed, stone, sheep, boar, cow, food, grain, veggies. see above for ROM
board state - rooms, fields, fence configurations - this would be hard, but actually the smallest brute force state set

Q-table approach is infeasible with this many states. it would really just take forever.

so 3 problems to solve
1. how to efficiently code available spaces
2. how to efficiently code board state
3. how to efficiently code resource states

-----------------------9/24/2016

game spaces can be reduced to 32 states, but still unclear how actions affect available spaces
round 1: 4 possibilities (4C1)
round 2: 6 possibilities (4C2)
round 3: 4 possibilities (4C3)
round 4: 1 possibility
r-5-6-7: 3-3-1
r-8-9-10-11-12-13-14: 2-1-2-1-2-1-1

these are summed to 32, not multiplied, since looking backward there is only one state
still need to encode actions efficiently - since order matters, we are looking at SUM[(12+r)Pn] where r is round # and n is number of actions
perhaps we can encode 'dependent actions' - those that require other actions to take before becoming available
can we just say "current round - you cannot choose your previous action/s"? to avoid the tuple permutation scenario?
perhaps another state variable containing the set of closed actions that is not part of the Q-table
(in a multiagent scenario, if a desirable action keeps being taken, we can add it to the value of the action, thus learning from others what is valuable)
so now the action set is 26 and the available space set is 32, and we have a static set (cleared every Round) containing invalid actions (that do not incur penalties)

-----------------------9/24/2016

the player board is a 3x5 grid, with two spaces fixed as rooms
rooms can only be built next to other rooms, fields can start anywhere but also must be adjacent, same with pastures, stables can go anywhere
a space on the player board can have 5-6 states
1 - unused | 2 - room (wood/clay/stone) | 3 - field (clear/grain/veggie) | 4 - unfenced stable | 5 - pastured | 6 - pastured and stabled
it's probably best to just dynamically provide valid moves on player board as they come up
so when field 1 is built - can choose from any of the 13 available spaces, but when field 2 is built, only 2-4 choices
still, how many player board configurations can there be - throughout the course of a game? - quite a lot

choosing configurations (and major improvements for that matter) add to the action list!

rooms - * indicates preferred orientations
2 rooms - 1 configuration
3 rooms - 3 configurations (line*, L*, half-T*)
4 rooms - 5 configurations (tall L*, long L, long-half-T, box*, side-T)
5 rooms - 5 configurations (C, L*, box-stub*, T, long-half-T, long-L)

we can apply heuristics here to reduce the state space, since it's family game and doesn't really matter
2 rooms - 1 config | 3 rooms - 1 (line) config | 4 rooms - 1 (L) config | 5 rooms - 1 (LL) config
fields follow a fixed eastern wing pattern, with the sixth field contesting with pastures

but is this the right way to go? do we effectively want to force the computer to build fences only once? that is a heuristic application as well...

------------------------intermediate

roll in game board resource counts into bool list of "available actions"

i.e. enumerate "sp+1f" "sp+2f" ... "sp+14f" as 14 separate actions
for the 10 resource accumulation spaces this becomes 14+14+14+14+14+14+10+5+7+5 = 111 new actions (101 net new actions)
total action list would then be 12+14+101 = 127
a boolean list of available actions is effectively a state
can do a dynamic q-table with 127 bits for game state, but harder to codify player state

what about "4 fences" ... "15 fences" or "1 stable" ... "4 stables" or "1 room" ... "3 rooms" or fireplace/cooking hearth/etc
maybe don't need to code player state - just set valid actions based on player's existing resources - would work for build room / majors / etc
makes it a little weird though - an agent would not be able to choose "8 wood" based on its current wood stash
don't we take wood when we don't have any - i guess we take it when we perceive a need for it (build a room, fences)
maybe if i have two rooms wood is a priority, if i haven't built any fences, but if i have then it is not a priority
so codify player state by {num_rooms, fences_remaining, stables_remaining, fields (same discussion for grain/veg/plow/sow)...}

when you glance at a player's board, how do you judge how well they are doing - basically the "scorecard"
- player count
- room count, type
- fields, grain, veg
- pastures, stables
- sheep, boar, cow
- unused spaces

from this you can determine eligibility for family growth, sow/bake, storing animals, equivalent food
you cannot determine eligibility for build room, build stable, build fences... so you need building resources as well

------------------------11/20/2016

no real progress in a while: need to simplify approach
1) build a tool to play solo family agricola
2) play it manually, check for bugs
3) then plug in an agent with a dynamic Q-table

- this forces us to build the game infrastructure that an agent can meaningfully interact with
- mostly stuck on how to represent player state in the state space: 127+ bit game state is acceptable, but nothing so far for players

environment
- game board
	- round #
	- available actions
	- # resources
- player board
	- encode squares and lines
- player resources
	- the big 10
	- # players
	- fences / stables
- action history

struct Action {
	uint8_t round;
	uint8_t move_number;
	uint8_t action_code;
};

struct Resource {
	uint8_t wood, clay, reed, stone, sheep, boar, cow, grain, veg, food;
};

struct Farm {
	uint8_t squares[3][5]; // enumerate {empty, w/c/s room, field, unf stable, pasture, p+stable}
	int8_t lines[4][6]; // enumerate {illegal, empty, fence}
};

class Env {
	public:
		Game game_board;
		Player player_board;
		list <Action> history;
};

class Game {
	public:
		uint8_t round;
		bool is_harvest;
		list actions[26]; // 127?
		list resources[10]; // roll in?
	private:
		void update(Action); // executes after valid move
};

class Player {
	public:
		Resource resources;
		Farm farm_board;
		uint8_t fences, stables; // finite
		uint8_t peoples; // 2-5
		int8_t score; // starts negative!
	private:
		int8_t move(Action); // validity checks
};

-----------------------11/29/2016

state machine approach for GAME class
not necessarily appropriate for PLAYER and AGENT

3 classes, GAME (game board), PLAYER (player resources and farm board), AGENT (decision maker)

GAME states: r1->r2->...->r14->h6
GAME events: receive 'action' from AGENT
GAME actions: change chosen 'action' to unavailable, return
			  if 'action' is 'last_action' then move to next state

should GAME check for 'last_action' or trust AGENT/PLAYER?
ok question answered (don't trust, demand action count and max action count)

AGENT state: present current information, accept input
AGENT event: collect input as 'action'
AGENT action: send 'action' to GAME and PLAYER
single circular state representation 

PLAYER state: hold current information
PLAYER event: receive 'action' from GAME<--AGENT
PLAYER action: update farm board and resource stack by interpreting 'action'
not really going to be a state machine
but Farm and Resource structs should probably have separate update mechanism

future planning: cards processing should happen in GAME
PLAYER should just declare what cards are in play and let GAME sort out what happens
common class or struct and corresponding database "cards"

--------------------------- 12/1/2016

what does the round/action data structure need to serve
1) given an action, determine if it is available
2) given a state, present available actions

game states are r1...r14 plus move #
r# gives you action set, move # (or prior moves) give you unavailability

what if the structure looked like
"action" --> free/taken/unavailable
right now it is
"round" --> available/unavailable

we don't really care what round a given action is in once it is available
if needed for cards we can store a vector with index [round] for actions
however the "action" method would probably need to enumerate all wood_# for example
and that gets messy with N players with cards where the space could have weird shit on it

how about a "space" with a "round" code, nominal "action", and "resource" struct

struct Game::Space {
	status = enum {LOCKED, OCCUPIED, OPEN}
	action = enum {0-6+10+14 base actions}
	Resource resources;
	when LOCKED->OPEN move resources to player;
	when OPEN->OCCUPIED move resources to player;
}

ok that solves the 'mess' still doesn't address the original question
but i guess now 'action' only needs to enumerate base actions
or we just send a vector of spaces back and forth that have actions and availability
but they don't have round number... is this needed, let's just put it in for now

---------------------------- 12/3/16

decision: Game will own a std::list<Player>
so Player is a subclass of Game, no need for Players to exist outside Game
Game::Game() will create list Players during construction
Game responsible for re-ordering players when SP taken

---------------------------- 12/13/16

what if we created Q-tables per... round? or stage?
we are creating q-tables per setup (n_players*is_family) anyways

would need some way to link the tables to apply final score trickle down
or 
develop some metric to evaluate your position at the end of each stage

this is really the same as "sectioning" a single Q-table

OK so final game state representation:
- n_players*is_family
- round number, move number, total moves this round
- game board resource accumulation (need an overarching struct)
- player resources, player board (ugh)

the columns/actions of a Q-table would be fixed at 24-30, the base action set
accumulation information is part of the game state
if you pick an action that is unavailable game.update just bounces you back (need to avoid inf loop)
this is kind of what humans do... "ahh why did you take 2 stone"

we can't really boil player resources down very far (room equivalents?) what about player board
- room type and #
- field type (empty, n_grain, n_veg) and #
- pasture sizes and #
- stable locations

struct AbstractFarm
{
	list<Room{int n, int type}> rooms
	list<Field{int n_grain, int n_veg}> fields
	list<Pasture{int size} pastures
	list<Stable{bool fenced} stables
}

revise

struct AbstractFarm
{
	int rooms, enum room_type
	int empty_fields, sown_fields, n_grain, n_veg
	int n_pastures, int net_size
	int fenced_stables, unfenced_stables
}

revise

struct AbstractFarm
{
	int rooms, enum type
	int animal_capacity // if animal capacity low, build fences, if high, take animals
	int sowing_capacity // if sowing capacity high, sow, if low, plow
	int n_grain, n_veg // needed for end-game scoring
}

how to compare performance degradation from abstraction <-- would be a good topical question
then we could just implement heuristics for everything else, reduce q-table computation demands
that is what we're doing, but don't we need a brute force first?

let the struct abstraction happen in agent. this is just a game.